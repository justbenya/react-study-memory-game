{"version":3,"sources":["components/Timer/Timer.jsx","utils.js","components/Card/Card.jsx","components/App/App.jsx","index.js"],"names":["initialTime","hours","minutes","seconds","Timer","start","reset","useState","date","setDate","elapsed","setElapsed","time","setTime","useEffect","Date","timerID","setInterval","now","clearInterval","ms","String","Math","floor","substring","Card","props","onCardOpen","isFlipped","index","pokemon","id","name","onClick","className","src","alt","width","pokemons","getData","array","sort","random","App","data","setData","opened","setOpened","paired","setPaired","moves","setMoves","setStart","gameOver","setGameOver","resetTimer","setResetTimer","timeoutID","length","slice","lastElement","includes","firstPokemon","secondPokemon","setTimeout","filter","indexItem","clearTimeout","handleCardOpen","gameEndBlock","map","key","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fbe4956c.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { msToTime } from '../../utils';\n\nconst initialTime = {\n    hours: '',\n    minutes: '',\n    seconds: ''\n}\n\nexport default function Timer({ start, reset}) {\n    const [date, setDate] = useState(null);\n    const [elapsed, setElapsed] = useState(0);\n    const [time, setTime] = useState(initialTime);\n\n    useEffect(() => {\n        if (start) setDate(new Date());\n    }, [start]);\n\n    useEffect(() => {\n        if (reset) setElapsed(0)\n    }, [reset])\n\n    useEffect(() => {\n        let timerID = null;\n\n        if (start) {\n            timerID = setInterval(() => {\n                const elapsed = Date.now() - date;\n                setElapsed(elapsed);\n            }, 60);\n        }\n\n        return () => clearInterval(timerID);\n    }, [start, date]);\n\n    useEffect(() => {\n        const { hours, minutes, seconds } = msToTime(elapsed);\n        setTime({ hours, minutes, seconds });\n    }, [elapsed]);\n\n    return (\n        <span>\n            <span>{ time.hours }</span>:<span>{ time.minutes }</span>:<span>{ time.seconds }</span>\n        </span>\n    );\n}\n","function shuffle(array) {\n    array.sort(() => Math.random() - 0.5);\n    return array;\n}\n\n// 3700000(ms) → 01(h):01(m):40(s)\nfunction msToTime(ms) {\n    const hours = String(Math.floor(ms / 1000 / 60 / 60) + 100).substring(1);\n    const minutes = String(Math.floor((ms % (1000 * 60 * 60)) / 1000 / 60) + 100).substring(1);\n    const seconds = String(Math.floor((ms % (1000 * 60)) / 1000) + 100).substring(1);\n    return { hours, minutes, seconds };\n}\n\n\nexport {\n    shuffle,\n    msToTime\n};\n","import React from 'react';\nimport './Card.css';\n\nexport default function Card(props) {\n    const { onCardOpen, isFlipped, index } = props;\n    const { id, name } = props.pokemon;\n\n    return (\n        <div\n            onClick={ () => onCardOpen(index) }\n            className={ `card ${ isFlipped ? 'card--flipped' : '' }` }\n        >\n            <div className=\"card__side card__side--front\">?</div>\n            <div className=\"card__side card__side--back\">\n                <img\n                    src={ `https://pokeres.bastionbot.org/images/pokemon/${ id }.png` }\n                    alt={ name }\n                    width=\"100\"\n                />\n            </div>\n        </div>\n    );\n}\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Timer from '../Timer';\nimport Card from '../Card';\nimport { shuffle } from '../../utils';\n\nconst pokemons = [\n    { id: 4, name: 'charizard' },\n    { id: 10, name: 'caterpie' },\n    { id: 77, name: 'ponyta' },\n    { id: 25, name: 'pikachu' },\n    { id: 132, name: 'ditto' },\n    { id: 133, name: 'eevee' }\n];\nconst getData = () => shuffle([...pokemons, ...pokemons]);\n\n// Правила:\n// v+ Можно выбрать из двух ячеек, больше ячеек за ход нельзя открыть\n// v+ Правильно угаданные ячейки сохраняются их нельзя закрыть\n// v+ Открытие двух ячеек считается за один ход\n// v+ Есть таймер за сколько быстрее игрок откроет все поле\n\nconst App = () => {\n    const [data, setData] = useState(getData());\n    const [opened, setOpened] = useState([]);\n    const [paired, setPaired] = useState([]);\n    const [moves, setMoves] = useState(0);\n    const [start, setStart] = useState(false);\n    const [gameOver, setGameOver] = useState(false);\n    const [resetTimer, setResetTimer] = useState(false);\n\n    const TIMER_DELAY = 800;\n\n    useEffect(() => {\n        let timeoutID = null;\n\n        if (paired.length) {\n            setOpened((opened) => {\n                const [lastElement] = paired.slice(-1);\n                if (opened.includes(lastElement)) return opened;\n                return [...opened, lastElement];\n            });\n        }\n\n        if (paired.length && paired.length % 2 === 0) {\n            const [firstPokemon, secondPokemon] = paired;\n\n            if (data[firstPokemon].id === data[secondPokemon].id) {\n                setPaired([]);\n                setMoves(moves => moves + 1);\n            }\n\n            timeoutID = setTimeout(() => {\n                setPaired([]);\n                setOpened((opened) => {\n                    return opened.filter(indexItem => indexItem !== firstPokemon && indexItem !== secondPokemon);\n                });\n                setMoves(moves => moves + 1);\n            }, TIMER_DELAY);\n        }\n\n        return () => clearTimeout(timeoutID);\n    }, [paired, data]);\n\n    useEffect(() => {\n        const isGameOver = opened.length === data.length;\n        if (isGameOver) {\n            setStart(false);\n            setGameOver(true);\n            setResetTimer(false);\n        }\n    }, [opened, data]);\n\n    const handleCardOpen = (index) => {\n        if (!gameOver) {\n            setStart(true);\n        }\n\n        setPaired((paired) => {\n            if (paired.length >= 2) {\n                return paired;\n            }\n\n            if (opened.includes(index) ||\n                paired.includes(index)) {\n                return paired;\n            }\n\n            return [...paired, index];\n        });\n    };\n\n    const handleStartGame = () => {\n        setOpened([]);\n        setPaired([]);\n        setMoves(0);\n        setStart(false);\n        setGameOver(false);\n        setResetTimer(true);\n        setData(getData());\n    };\n\n    const gameEndBlock = (\n        <button className=\"game-end\" onClick={ handleStartGame }>\n            <p>You won!</p>\n            <p>Play again?</p>\n        </button>\n    );\n\n    return (\n        <div className=\"container\">\n            <div className=\"container__top\">\n                <p>Moves: <span>{ moves }</span></p>\n                {\n                    gameOver ? gameEndBlock : null\n                }\n                <p>Timer: <Timer start={ start } reset={ resetTimer } /></p>\n            </div>\n            <div className=\"cards\">\n                { data.map((pokemon, index) => {\n                    let isFlipped = false;\n                    if (opened.includes(index)) isFlipped = true;\n\n                    return (\n                        <Card\n                            onCardOpen={ handleCardOpen }\n                            pokemon={ pokemon }\n                            isFlipped={ isFlipped }\n                            key={ index }\n                            index={ index }\n                        />);\n                }) }\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}